//
// Component Mixins
//
// A collection of utility mixins for consistent component styling across Chassis CSS.
// These mixins help maintain consistent theming, spacing, and borders by using CSS
// custom properties with optional component namespacing.
//

// scss-docs-start colors-mixin
// Applies standard color properties using CSS custom properties.
//
// @param {string} $comp - Optional component namespace for CSS variables.
//                         When provided, variables will be prefixed with "$comp-".
//
// Uses CSS variables for text color, background color, and border color,
// enabling consistent theming across light and dark modes.
@mixin colors($comp: null) {
  color: var(--#{$prefix}#{if($comp, "#{$comp}-", "")}fg-color);
  background-color: var(--#{$prefix}#{if($comp, "#{$comp}-", "")}bg-color);
  border-color: var(--#{$prefix}#{if($comp, "#{$comp}-", "")}border-color);
  // fill: var(--#{$prefix}#{if($comp, "#{$comp}-", "")}icon-color);
}
// scss-docs-end colors-mixin

// scss-docs-start padding-mixin
// Applies standard padding using CSS custom properties.
//
// @param {string} $comp - Optional component namespace for CSS variables.
//                         When provided, variables will be prefixed with "$comp-".
//
// Applies vertical (padding-y) and horizontal (padding-x) padding values
// defined in CSS custom properties.
@mixin padding($comp: null) {
  padding: var(--#{$prefix}#{if($comp, "#{$comp}-", "")}padding-y) var(--#{$prefix}#{if($comp, "#{$comp}-", "")}padding-x);
}
// scss-docs-end padding-mixin

// scss-docs-start box-padding-mixin
// Applies adjusted padding that accounts for border width.
//
// @param {string} $comp - Optional component namespace for CSS variables.
//                         When provided, variables will be prefixed with "$comp-".
//
// Subtracts border width from padding to achieve the exact visual padding
// specified in design tools, maintaining the same apparent padding regardless
// of border width. This ensures the content box precisely matches design specs.
@mixin box-padding($comp: null, $modifier: null) {
  @if $enable-padding-box {
    $border-width: var(--#{$prefix}#{if($comp, "#{$comp}-", "")}border-width);
    $padding-y: #{calc(var(--#{$prefix}#{if($comp, "#{$comp}-", "")}padding-y) - #{$border-width})};
    $padding-x: #{calc(var(--#{$prefix}#{if($comp, "#{$comp}-", "")}padding-x) - #{$border-width})};
    padding: $padding-y $padding-x;
  } @else {
    @include padding($comp);
  }
}
// scss-docs-end box-padding-mixin

// scss-docs-start border-mixin
// Applies consistent border styling using CSS custom properties.
//
// @param {string} $comp - Optional component namespace for CSS variables.
//                         When provided, variables will be prefixed with "$comp-".
//
// Creates a border with width, style, and color from CSS variables.
// Provides fallback values (0, solid, transparent) if the variables aren't defined.
// This ensures elements maintain appropriate box model even without defined borders.
@mixin border($comp: null) {
  border: var(--#{$prefix}#{if($comp, "#{$comp}-", "")}border-width, 0) var(--#{$prefix}#{if($comp, "#{$comp}-", "")}border-style, solid) var(--#{$prefix}#{if($comp, "#{$comp}-", "")}border-color, transparent);
}
// scss-docs-end border-mixin

// scss-docs-start last-mb-0-mixin
// Removes bottom margin from the last paragraph element.
//
// Extends the .last-mb-0 utility class, which sets margin-bottom: 0
// specifically on the last paragraph (p) child of the parent element.
@mixin last-mb-0 {
  @extend .last-mb-0;
}
// scss-docs-end last-mb-0-mixin

