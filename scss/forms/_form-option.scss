//
// Form Option Components
//
// This file contains styling for form option components including checkboxes, radio buttons,
// switches, and button options. It supports different sizes, states (checked, disabled),
// and themes (default, alternate) with dark mode support.
//

//
// Check/radio
//
// Standard styling for checkbox and radio input groups with labels.
// Supports small, medium, and large sizing, as well as reverse layout.
//

.form-option {
  @extend %form-colors;

  --#{$prefix}input-size: #{$form-option-input-medium-size};
  --#{$prefix}gap: #{$input-medium-gap};
  @include map-font-size($input-medium-text-font, form-option);
  @include map-line-height($input-medium-text-font, form-option);

  min-height: $form-option-min-height;
  margin: $form-option-margin-y 0;

  @include font-size();
  @include line-height();

  &.small {
    --#{$prefix}input-size: #{$form-option-input-small-size};
    --#{$prefix}gap: #{$input-small-gap};
    @include map-font-size($input-small-text-font, form-option);
    @include map-line-height($input-small-text-font, form-option);
  }

  &.large {
    --#{$prefix}input-size: #{$form-option-input-large-size};
    --#{$prefix}gap: #{$input-large-gap};
    @include map-font-size($input-large-text-font, form-option);
    @include map-line-height($input-large-text-font, form-option);
  }

  .option-input {
    float: left;
    margin-top: var(--#{$prefix}margin-t);
    margin-right: var(--#{$prefix}gap);
  }

  &.reverse {
    text-align: right;

    .option-input {
      float: right;
      margin-right: 0;
      margin-left: var(--#{$prefix}gap);
    }
  }

}

//
// Option Input Styling
//
// Core styling for checkbox and radio inputs with support for:
// - Default and alternate styling variants
// - Various states (idle, focus, checked, disabled)
// - Indeterminate state for checkboxes
// - Customizable icons for different states
// - Accessibility features including high contrast support
//

.option-input {
  @extend %form-colors;
  $default-disabled-check-icon: svg-color($form-option-input-check-icon, $input-default-disabled-fg-inactive);
  $default-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-default-disabled-fg-inactive);
  $default-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-default-disabled-fg-inactive);
  $alternate-disabled-check-icon: svg-color($form-option-input-check-icon, $input-alternate-disabled-fg-inactive);
  $alternate-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-alternate-disabled-fg-inactive);
  $alternate-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-alternate-disabled-fg-inactive);
  $primary-idle-check-icon: svg-color($form-option-input-check-icon, $form-option-input-checked-fg-color);
  $primary-idle-radio-icon: svg-color($form-option-input-radio-icon, $form-option-input-checked-fg-color);
  $primary-idle-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $form-option-input-checked-fg-color);

  // --#{$prefix}fg-color: var(--#{$prefix}input-fg-color, var(--#{$prefix}idle-fg-active));
  --#{$prefix}bg-color: var(--#{$prefix}input-bg-color, var(--#{$prefix}idle-bg-regular));
  --#{$prefix}border-color: var(--#{$prefix}input-border-color, var(--#{$prefix}idle-border-color));
  --#{$prefix}border-width: var(--#{$prefix}input-border-width, var(--#{$prefix}option-input-border-width, #{$form-option-input-border-width}));
  --#{$prefix}border-radius: var(--#{$prefix}input-border-radius, var(--#{$prefix}option-input-border-width, #{$form-option-input-checkbox-border-radius}));

  --#{$prefix}size: var(--#{$prefix}option-input-size, #{$form-option-input-medium-size});
  --#{$prefix}margin-t: var(--#{$prefix}option-input-margin-t, #{calc((var(--#{$prefix}line-height) - var(--#{$prefix}size)) * .5)});

  flex-shrink: 0;
  width: var(--#{$prefix}size);
  height: var(--#{$prefix}size);
  vertical-align: top;
  appearance: none;
  background-color: var(--#{$prefix}bg-color);
  // background-image: var(--#{$prefix}icon);
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  border: var(--#{$prefix}border-width) solid var(--#{$prefix}border-color);
  print-color-adjust: exact; // Keep themed appearance for print
  @include box-shadow($form-input-box-shadow);
  @include transition($form-option-transition);

  @if $enable-component-gradients {
    background-image: var(--#{$prefix}icon), var(--#{$prefix}bg-gradient);
  } @else {
    background-image: var(--#{$prefix}icon);
  }


  &[type="checkbox"] {
    @include border-radius(var(--#{$prefix}option-input-border-radius));
  }

  &[type="radio"] {
    // stylelint-disable-next-line property-disallowed-list
    border-radius: $form-option-input-radio-border-radius;
  }

  // &:active {
  //   filter: $option-input-active-filter;
  // }

  &:focus {
    --#{$prefix}border-color: var(--#{$prefix}focus-border-color);
    --#{$prefix}box-shadow: var(--#{$prefix}focus-box-shadow);

    outline: 0;
    @if $enable-component-shadows {
      @include box-shadow($form-input-box-shadow, var(--#{$prefix}box-shadow));
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: var(--#{$prefix}box-shadow);
    }
  }

  &:checked {
    --#{$prefix}bg-color: var(--#{$prefix}input-checked-bg-color, #{$form-option-input-checked-bg-color});
    --#{$prefix}border-color: var(--#{$prefix}input-checked-border-color, #{$form-option-input-checked-border-color});

    &[type="checkbox"] {
      --#{$prefix}icon: #{$primary-idle-check-icon};
    }

    &[type="radio"] {
      --#{$prefix}icon: #{$primary-idle-radio-icon};
    }
  }

  &[type="checkbox"]:indeterminate {
    --#{$prefix}bg-color: var(--#{$prefix}input-checked-bg-color, #{$form-option-input-checked-bg-color});
    --#{$prefix}border-color: var(--#{$prefix}input-checked-bg-color, #{$form-option-input-checked-bg-color});
    --#{$prefix}icon: #{$primary-idle-indeterminate-icon};
  }

  // Use disabled attribute in addition of :disabled pseudo-class
  &[disabled],
  &:disabled {
    --#{$prefix}bg-color: var(--#{$prefix}disabled-bg-color, #{$input-default-disabled-bg-regular});
    --#{$prefix}border-color: var(--#{$prefix}disabled-border-color, #{$input-default-disabled-border-color});
    pointer-events: none;
    filter: none;
    // opacity: $form-option-input-disabled-opacity;
    ~ .option-label {
      // --#{$prefix}fg-color: var(--#{$prefix}disabled-fg-color, #{$input-default-disabled-fg-active});
      cursor: default;
      opacity: $form-option-label-disabled-opacity;
    }

    &[type="checkbox"]:checked {
      --#{$prefix}icon: #{$default-disabled-check-icon};
    }

    &[type="radio"]:checked {
      --#{$prefix}icon: #{$default-disabled-radio-icon};
    }

    &[type="checkbox"]:indeterminate {
      --#{$prefix}bg-color: var(--#{$prefix}disabled-bg-color, #{$input-default-disabled-bg-regular});
      --#{$prefix}border-color: var(--#{$prefix}disabled-border-color, #{$input-default-disabled-border-color});
      --#{$prefix}icon: #{$default-disabled-indeterminate-icon};
    }

    @if $enable-alternate-forms {
      .form-alternate &,
      &.form-alternate {
        --#{$prefix}bg-color: var(--#{$prefix}disabled-bg-color, #{$input-alternate-disabled-bg-regular});
        --#{$prefix}border-color: var(--#{$prefix}disabled-border-color, #{$input-alternate-disabled-border-color});
        &[type="checkbox"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-check-icon};
        }

        &[type="radio"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-radio-icon};
        }

        &[type="checkbox"]:indeterminate {
          --#{$prefix}bg-color: var(--#{$prefix}disabled-bg-color, #{$input-alternate-disabled-bg-regular});
          --#{$prefix}border-color: var(--#{$prefix}disabled-border-color, #{$input-alternate-disabled-border-color});
          --#{$prefix}icon: #{$alternate-disabled-indeterminate-icon};
        }
      }
    }

  }
}

.option-input.small,
.form-option.small .option-input  {
  --#{$prefix}size: #{$form-option-input-small-size};
}

.option-input.large,
.form-option.large .option-input  {
  --#{$prefix}size: #{$form-option-input-large-size};
}


.option-label {
  @extend %form-colors;
  color: var(--#{$prefix}fg-color, $form-option-label-color);
  cursor: $form-option-label-cursor;
}

//
// Switch Component
//
// Toggle switch styling that transforms checkboxes into switches.
// Features customizable icons, transitions, and states (idle, focus, checked, disabled).
// Supports both left-to-right and right-to-left (reverse) layouts.
//

.form-switch {
  $form-switch-idle-icon:         svg-color($form-switch-icon, $form-switch-idle-color) !default;
  $form-switch-disabled-icon:     svg-color($form-switch-icon, $form-switch-disabled-color) !default;
  $form-switch-focus-icon:        svg-color($form-switch-icon, $form-switch-focus-color) !default;
  $form-switch-checked-icon:      svg-color($form-switch-icon, $form-switch-checked-color) !default;

  padding-left: $form-switch-padding-s;

  .option-input {
    --#{$prefix}form-switch-icon: #{$form-switch-idle-icon};

    width: $form-switch-width;
    margin-left: $form-switch-padding-s * -1;
    @if $enable-component-gradients {
      background-image: var(--#{$prefix}form-switch-icon), var(--#{$prefix}bg-gradient);
    } @else {
      background-image: var(--#{$prefix}form-switch-icon);
    }
    background-position: left center;
    @include border-radius($form-switch-border-radius, 0);
    @include transition($form-switch-transition);

    &:focus {
      --#{$prefix}form-switch-icon: #{$form-switch-focus-icon};
    }

    &:checked {
      --#{$prefix}form-switch-icon: #{$form-switch-checked-icon};
      background-position: $form-switch-checked-icon-position;
    }

    &:disabled {
      --#{$prefix}form-switch-icon: #{$form-switch-disabled-icon};
    }
  }

  &.reverse {
    padding-right: $form-switch-padding-s;
    padding-left: 0;

    .option-input {
      margin-right: $form-switch-padding-s * -1;
      margin-left: 0;
    }
  }
}

//
// Utility Classes
//

// Inline form option - displays option groups horizontally instead of stacked
.form-option-inline {
  display: inline-block;
  margin-right: $form-option-inline-margin-end;
}

// Button option - hidden input that can be used with button components
// Used for creating button-based option groups where clicking buttons changes the selection
.button-option {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  pointer-events: none;

  &[disabled],
  &:disabled {
    + .button {
      pointer-events: none;
      filter: none;
      opacity: $form-option-button-disabled-opacity;
    }
  }
}

//
// Dark Mode Mixins
//
// These mixins provide dark mode styling for form option components.
// They are used within the color-mode mixin to apply appropriate styling
// based on the color mode type (media-query or class-based).
//

// Mixin for applying dark mode styling to form switches
// Updates icon colors for idle, focus, checked, and disabled states
@mixin switch-dark() {
  $form-switch-idle-icon:       svg-color($form-switch-icon, $form-switch-idle-color, true) !default;
  $form-switch-disabled-icon:   svg-color($form-switch-icon, $form-switch-disabled-color, true) !default;
  $form-switch-focus-icon:      svg-color($form-switch-icon, $form-switch-focus-color, true) !default;
  $form-switch-checked-icon:    svg-color($form-switch-icon, $form-switch-checked-color, true) !default;

  --#{$prefix}form-switch-icon: #{$form-switch-idle-icon};

  &:focus {
    --#{$prefix}form-switch-icon: #{$form-switch-focus-icon};
  }

  &:checked {
    --#{$prefix}form-switch-icon: #{$form-switch-checked-icon};
  }

  &:disabled {
    --#{$prefix}form-switch-icon: #{$form-switch-disabled-icon};
  }
}

// Mixin for applying dark mode styling to checkboxes and radio inputs
// Updates icon colors for checked, disabled, and indeterminate states
// Handles both default and alternate styling variants
@mixin option-input-dark() {
  // Generate dark mode versions of the SVG icons
  $default-disabled-check-icon: svg-color($form-option-input-check-icon, $input-default-disabled-fg-inactive, true);
  $default-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-default-disabled-fg-inactive, true);
  $default-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-default-disabled-fg-inactive, true);
  $alternate-disabled-check-icon: svg-color($form-option-input-check-icon, $input-alternate-disabled-fg-inactive, true);
  $alternate-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-alternate-disabled-fg-inactive, true);
  $alternate-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-alternate-disabled-fg-inactive, true);

  // Apply dark mode icons to disabled states
  &[disabled],
  &:disabled {
    &[type="checkbox"]:checked {
      --#{$prefix}icon: #{$default-disabled-check-icon};
    }

    &[type="radio"]:checked {
      --#{$prefix}icon: #{$default-disabled-radio-icon};
    }

    &[type="checkbox"]:indeterminate {
      --#{$prefix}icon: #{$default-disabled-indeterminate-icon};
    }
  }

  @if $enable-alternate-forms {
    .form-alternate &,
    &.form-alternate {
      &[disabled],
      &:disabled {
        &[type="checkbox"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-check-icon};
        }

        &[type="radio"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-radio-icon};
        }

        &[type="checkbox"]:indeterminate {
          --#{$prefix}icon: #{$alternate-disabled-indeterminate-icon};
        }
      }
    }
  }

}

//
// Dark Mode Implementation
//
// Applies dark mode styling based on the configured color mode type
// (either media-query based or class-based).
//
@if $enable-dark-mode {
  @include color-mode(dark) {
    @if $color-mode-type == "media-query" {
      // Apply dark mode styling with media query approach
      .option-input {
        @include option-input-dark();
      }
      .form-switch .option-input {
        @include switch-dark();
      }
    } @else {
      // Apply dark mode styling with class-based approach
      // Using explicit selectors to avoid conflicts with light theme overrides
      .option-input:not(.option-input[data-cx-theme="light"], [data-cx-theme="dark"] [data-cx-theme="light"] .option-input),
      &.option-input {
        @include option-input-dark();
      }

      .form-switch:not(.form-switch[data-cx-theme="light"], [data-cx-theme="dark"] [data-cx-theme="light"] .form-switch) .option-input,
      &.form-switch .option-input {
        @include switch-dark();
      }
    }
  }
}
