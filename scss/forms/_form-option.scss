//
// Check/radio
//

.form-option {
  @extend %form-colors;

  --#{$prefix}input-size: #{$form-option-input-medium-size};
  --#{$prefix}gap: #{$input-medium-gap};
  @include map-font-size($input-medium-text-font, form-option);
  @include map-line-height($input-medium-text-font, form-option);

  min-height: $form-option-min-height;
  margin: $form-option-margin-y 0;

  @include font-size();
  @include line-height();

  &.small {
    --#{$prefix}input-size: #{$form-option-input-small-size};
    --#{$prefix}gap: #{$input-small-gap};
    @include map-font-size($input-small-text-font, form-option);
    @include map-line-height($input-small-text-font, form-option);
  }

  &.large {
    --#{$prefix}input-size: #{$form-option-input-large-size};
    --#{$prefix}gap: #{$input-large-gap};
    @include map-font-size($input-large-text-font, form-option);
    @include map-line-height($input-large-text-font, form-option);
  }

  .option-input {
    float: left;
    margin-top: var(--#{$prefix}margin-top);
    margin-right: var(--#{$prefix}gap);
  }

  &.reverse {
    text-align: right;

    .option-input {
      float: right;
      margin-right: 0;
      margin-left: var(--#{$prefix}gap);
    }
  }

}

.option-input {
  @extend %form-colors;
  // $default-idle-check-icon: svg-color($form-option-input-check-icon, $input-default-idle-fg-active);
  // $default-idle-radio-icon: svg-color($form-option-input-radio-icon, $input--default-idle-fg-active);
  // $default-idle-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-idle-fg-active);
  $default-disabled-check-icon: svg-color($form-option-input-check-icon, $input-default-disabled-fg-inactive);
  $default-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-default-disabled-fg-inactive);
  $default-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-default-disabled-fg-inactive);
  $alternate-disabled-check-icon: svg-color($form-option-input-check-icon, $input-alternate-disabled-fg-inactive);
  $alternate-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-alternate-disabled-fg-inactive);
  $alternate-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-alternate-disabled-fg-inactive);
  $primary-idle-check-icon: svg-color($form-option-input-check-icon, $form-option-input-checked-fg-color);
  $primary-idle-radio-icon: svg-color($form-option-input-radio-icon, $form-option-input-checked-fg-color);
  $primary-idle-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $form-option-input-checked-fg-color);

  // --#{$prefix}fg-color: var(--#{$prefix}input-fg-color, var(--#{$prefix}input-idle-fg-active));
  --#{$prefix}bg-color: var(--#{$prefix}input-bg-color, var(--#{$prefix}input-idle-bg-regular));
  --#{$prefix}border-color: var(--#{$prefix}input-border-color, var(--#{$prefix}input-idle-border-color));
  --#{$prefix}border-width: var(--#{$prefix}input-border-width, var(--#{$prefix}option-input-border-width, #{$form-option-input-border-width}));
  --#{$prefix}border-radius: var(--#{$prefix}input-border-radius, var(--#{$prefix}option-input-border-width, #{$form-option-input-checkbox-border-radius}));

  --#{$prefix}size: var(--#{$prefix}option-input-size, #{$form-option-input-medium-size});
  --#{$prefix}margin-top: var(--#{$prefix}option-input-margin-t, #{calc((var(--#{$prefix}line-height) - var(--#{$prefix}size)) * .5)});

  flex-shrink: 0;
  width: var(--#{$prefix}size);
  height: var(--#{$prefix}size);
  vertical-align: top;
  appearance: none;
  background-color: var(--#{$prefix}bg-color);
  // background-image: var(--#{$prefix}icon);
  background-repeat: no-repeat;
  background-position: center;
  background-size: contain;
  border: var(--#{$prefix}border-width) solid var(--#{$prefix}border-color);
  print-color-adjust: exact; // Keep themed appearance for print
  @include box-shadow($form-input-box-shadow);
  @include transition($form-option-transition);

  @if $enable-component-gradients {
    background-image: var(--#{$prefix}icon), var(--#{$prefix}bg-gradient);
  } @else {
    background-image: var(--#{$prefix}icon);
  }


  &[type="checkbox"] {
    @include border-radius(var(--#{$prefix}option-input-border-radius));
  }

  &[type="radio"] {
    // stylelint-disable-next-line property-disallowed-list
    border-radius: $form-option-input-radio-border-radius;
  }

  // &:active {
  //   filter: $option-input-active-filter;
  // }

  &:focus {
    --#{$prefix}input-border-color: var(--#{$prefix}input-focus-border-color);
    --#{$prefix}input-box-shadow: var(--#{$prefix}input-focus-box-shadow);

    outline: 0;
    @if $enable-component-shadows {
      @include box-shadow($form-input-box-shadow, var(--#{$prefix}input-box-shadow));
    } @else {
      // Avoid using mixin so we can pass custom focus shadow properly
      box-shadow: var(--#{$prefix}input-box-shadow);
    }
  }

  &:checked {
    --#{$prefix}bg-color: var(--#{$prefix}input-checked-bg-color, #{$form-option-input-checked-bg-color});
    --#{$prefix}border-color: var(--#{$prefix}input-checked-border-color, #{$form-option-input-checked-border-color});

    &[type="checkbox"] {
      --#{$prefix}icon: #{$primary-idle-check-icon};
    }

    &[type="radio"] {
      --#{$prefix}icon: #{$primary-idle-radio-icon};
    }
  }

  &[type="checkbox"]:indeterminate {
    --#{$prefix}bg-color: var(--#{$prefix}input-checked-bg-color, #{$form-option-input-checked-bg-color});
    --#{$prefix}border-color: var(--#{$prefix}input-checked-bg-color, #{$form-option-input-checked-bg-color});
    --#{$prefix}icon: #{$primary-idle-indeterminate-icon};
  }

  // &:disabled {
  //   --#{$prefix}fg-color: var(--#{$prefix}input-disabled-fg-color, #{$input-default-idle-fg-active});
  //   --#{$prefix}bg-color: var(--#{$prefix}input-disabled-bg-color, #{$input-default-idle-background});
  //   pointer-events: none;
  //   filter: none;
  //   opacity: $form-option-input-disabled-opacity;
  // }

  // Use disabled attribute in addition of :disabled pseudo-class
  // See: https://github.com/twbs/bootstrap/issues/28247
  &[disabled],
  &:disabled {
    --#{$prefix}bg-color: var(--#{$prefix}input-disabled-bg-color, #{$input-default-disabled-bg-regular});
    --#{$prefix}border-color: var(--#{$prefix}input-disabled-border-color, #{$input-default-disabled-border-color});
    pointer-events: none;
    filter: none;
    // opacity: $form-option-input-disabled-opacity;
    ~ .option-label {
      // --#{$prefix}fg-color: var(--#{$prefix}input-disabled-fg-color, #{$input-default-disabled-fg-active});
      cursor: default;
      opacity: $form-option-label-disabled-opacity;
    }

    &[type="checkbox"]:checked {
      --#{$prefix}icon: #{$default-disabled-check-icon};
    }

    &[type="radio"]:checked {
      --#{$prefix}icon: #{$default-disabled-radio-icon};
    }

    &[type="checkbox"]:indeterminate {
      --#{$prefix}bg-color: var(--#{$prefix}input-disabled-bg-color, #{$input-default-disabled-bg-regular});
      --#{$prefix}border-color: var(--#{$prefix}input-disabled-border-color, #{$input-default-disabled-border-color});
      --#{$prefix}icon: #{$default-disabled-indeterminate-icon};
    }

    @if $enable-alternate-forms {
      .form-alternate &,
      &.form-alternate {
        --#{$prefix}bg-color: var(--#{$prefix}input-disabled-bg-color, #{$input-alternate-disabled-bg-regular});
        --#{$prefix}border-color: var(--#{$prefix}input-disabled-border-color, #{$input-alternate-disabled-border-color});
        &[type="checkbox"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-check-icon};
        }

        &[type="radio"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-radio-icon};
        }

        &[type="checkbox"]:indeterminate {
          --#{$prefix}bg-color: var(--#{$prefix}input-disabled-bg-color, #{$input-alternate-disabled-bg-regular});
          --#{$prefix}border-color: var(--#{$prefix}input-disabled-border-color, #{$input-alternate-disabled-border-color});
          --#{$prefix}icon: #{$alternate-disabled-indeterminate-icon};
        }
      }
    }

  }
}

.option-input.small,
.form-option.small .option-input  {
  --#{$prefix}size: #{$form-option-input-small-size};
  // --#{$prefix}margin-top: #{subtract($line-height-text-small, $form-option-input-small-size) * .35}; // line-height minus check height
  // --#{$prefix}margin-top: #{calc((var(--#{$prefix}line-height) - var(--#{$prefix}size)) * .35)}; // line-height minus check height
}

.option-input.large,
.form-option.large .option-input  {
  --#{$prefix}size: #{$form-option-input-large-size};
  // --#{$prefix}margin-top: #{subtract($line-height-text-large, $form-option-input-large-size) * .35}; // line-height minus check height
}


.option-label {
  @extend %form-colors;
  color: var(--#{$prefix}fg-color, $form-option-label-color);
  cursor: $form-option-label-cursor;
}

//
// Switch
//

.form-switch {
  padding-left: $form-switch-padding-s;

  .option-input {
    --#{$prefix}form-switch-icon: #{escape-svg($form-switch-icon)};

    width: $form-switch-width;
    margin-left: $form-switch-padding-s * -1;
    background-image: var(--#{$prefix}form-switch-icon);
    background-position: left center;
    @include border-radius($form-switch-border-radius, 0);
    @include transition($form-switch-transition);

    &:focus {
      --#{$prefix}form-switch-icon: #{escape-svg($form-switch-focus-icon)};
    }

    &:checked {
      background-position: $form-switch-checked-icon-position;

      @if $enable-component-gradients {
        --#{$prefix}form-switch-icon: #{escape-svg($form-switch-checked-icon)}, var(--#{$prefix}bg-gradient);
      } @else {
        --#{$prefix}form-switch-icon: #{escape-svg($form-switch-checked-icon)};
      }
    }
  }

  &.reverse {
    padding-right: $form-switch-padding-s;
    padding-left: 0;

    .option-input {
      margin-right: $form-switch-padding-s * -1;
      margin-left: 0;
    }
  }
}

.form-option-inline {
  display: inline-block;
  margin-right: $form-option-inline-margin-end;
}

.button-option {
  position: absolute;
  clip: rect(0, 0, 0, 0);
  pointer-events: none;

  &[disabled],
  &:disabled {
    + .button {
      pointer-events: none;
      filter: none;
      opacity: $form-option-button-disabled-opacity;
    }
  }
}

@if $enable-dark-mode {
  @include color-mode(dark) {
    .form-switch .option-input:not(:checked):not(:focus) {
      --#{$prefix}form-switch-icon: #{escape-svg($form-switch-icon-dark)};
    }
  }
}

@mixin option-input-dark() {
  $default-disabled-check-icon: svg-color($form-option-input-check-icon, $input-default-disabled-fg-inactive, true);
  $default-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-default-disabled-fg-inactive, true);
  $default-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-default-disabled-fg-inactive, true);
  $alternate-disabled-check-icon: svg-color($form-option-input-check-icon, $input-alternate-disabled-fg-inactive, true);
  $alternate-disabled-radio-icon: svg-color($form-option-input-radio-icon, $input-alternate-disabled-fg-inactive, true);
  $alternate-disabled-indeterminate-icon: svg-color($form-option-input-indeterminate-icon, $input-alternate-disabled-fg-inactive, true);

  &[disabled],
  &:disabled {
    &[type="checkbox"]:checked {
      --#{$prefix}icon: #{$default-disabled-check-icon};
    }

    &[type="radio"]:checked {
      --#{$prefix}icon: #{$default-disabled-radio-icon};
    }

    &[type="checkbox"]:indeterminate {
      --#{$prefix}icon: #{$default-disabled-indeterminate-icon};
    }
  }

  @if $enable-alternate-forms {
    .form-alternate &,
    &.form-alternate {
      &[disabled],
      &:disabled {
        &[type="checkbox"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-check-icon};
        }

        &[type="radio"]:checked {
          --#{$prefix}icon: #{$alternate-disabled-radio-icon};
        }

        &[type="checkbox"]:indeterminate {
          --#{$prefix}icon: #{$alternate-disabled-indeterminate-icon};
        }
      }
    }
  }

}

@if $enable-dark-mode {
  @include color-mode(dark) {
    @if $color-mode-type == "media-query" {
      .option-input {
        @include option-input-dark();
      }
    } @else {
      // .form-select:not([data-cx-theme="light"] .form-select):not([data-cx-theme="light"].form-select),
      .option-input:not([data-cx-theme="dark"] [data-cx-theme="light"] .option-input):not([data-cx-theme="dark"] [data-cx-theme="light"].option-input),
      &.option-input {
        @include option-input-dark();
      }
    }
  }
}
