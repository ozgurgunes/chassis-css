// stylelint-disable scss/dimension-no-non-numeric-values
// RFS Functions
//
// Utility functions used by RFS

// Helper function to get the formatted non-responsive value
@function rfs-value($values) {
  // Convert to list
  $values: if(type-of($values) != list, ($values,), $values);

  $val: "";

  // Loop over each value and calculate value
  @each $value in $values {
    @if $value == 0 {
      $val: $val + " 0";
    }
    @else {
      // Cache $value unit
      $unit: if(type-of($value) == "number", unit($value), false);

      @if $unit == px {
        // Convert to rem if needed
        $val: $val + " " + if($rfs-unit == rem, #{divide($value, $value * 0 + $rfs-rem-value)}rem, $value);
      }
      @else if $unit == rem {
        // Convert to px if needed
        $val: $val + " " + if($rfs-unit == px, #{divide($value, $value * 0 + 1) * $rfs-rem-value}px, $value);
      } @else {
        // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
        $val: $val + " " + $value;
      }
    }
  }

  // Remove first space
  @return unquote(str-slice($val, 2));
}

// Helper function to get the responsive value calculated by RFS
@function rfs-fluid-value($values, $property: font-size) {
  // Convert to list
  $values: if(type-of($values) != list, ($values,), $values);

  $val: "";

  // Loop over each value and calculate value
  @each $value in $values {
    @if $value == 0 {
      $val: $val + " 0";
    } @else {
      // Cache $value unit
      $unit: if(type-of($value) == "number", unit($value), false);

      // If $value isn't a number (like inherit) or $value has a unit (not px or rem, like 1.5em) or $ is 0, just print the value
      @if not $unit or $unit != px and $unit != rem {
        $val: $val + " " + $value;
      } @else {
        // Remove unit from $value for calculations
        $value: divide($value, $value * 0 + if($unit == px, 1, divide(1, $rfs-rem-value)));

        // Only add the media query if the value is greater than the minimum value
        @if abs($value) <= $rfs-base-value or not $enable-rfs {
          $val: $val + " " + if($rfs-unit == rem, #{divide($value, $rfs-rem-value)}rem, #{$value}px);
        }
        @else {
          // TODO: Find a way to use percentage values for line-heights in Figma
          // Apply a specific rfs-factor for line-height as a workaround for Chassis line-height tokens
          $rfs-factor: if(str-index($property, "line-height"), $rfs-factor * divide($value, 100), $rfs-factor);

          // Calculate the minimum value
          $value-min: $rfs-base-value + divide(abs($value) - $rfs-base-value, $rfs-factor);

          // Calculate difference between $value and the minimum value
          $value-diff: abs($value) - $value-min;

          // Base value formatting
          $min-width: if($rfs-unit == rem, #{divide($value-min, $rfs-rem-value)}rem, #{$value-min}px);

          // Use negative value if needed
          $min-width: if($value < 0, -$min-width, $min-width);

          // Use `vmin` if two-dimensional is enabled
          $variable-unit: if($rfs-two-dimensional, vmin, vw);

          // Calculate the variable width between 0 and $rfs-breakpoint
          $variable-width: #{divide($value-diff * 100, $rfs-breakpoint)}#{$variable-unit};

          // Return the calculated value
          $val: $val + " calc(" + $min-width + if($value < 0, " - ", " + ") + $variable-width + ")";
        }
      }
    }
  }

  // Remove first space
  @return unquote(str-slice($val, 2));
}

// Function to normalize a selector for use as a map key
@function rfs-get-selector-key($selector) {
  // Convert the selector to a string
  $selector-str: if(type-of($selector) == "string", $selector, inspect($selector));

  // If the selector is a list surrounded by parentheses, extract the actual selector
  @if str-index($selector-str, "(") == 1 and str-index($selector-str, ")") == str-length($selector-str) {
    $selector-str: str-slice($selector-str, 2, -2);

    // Remove trailing comma if present
    @if str-slice($selector-str, -1) == "," {
      $selector-str: str-slice($selector-str, 1, -2);
    }
  }

  // Return the clean selector
  @return $selector-str;
}

// Simple map to store properties by selector
$rfs-rules-map: () !default;
// Map to store fixed values for disable-rfs selectors
$rfs-disable-class-map: () !default;

// Function to add a rule to our collection
@function rfs-collect-rule($selector, $property, $value, $variable: null, $fixed-value: null) {
  // Format value with CSS variable if provided
  $formatted-value: if($variable != null, unquote("var(#{$variable}, #{$value})"), $value);

  // Get a clean selector key
  $selector-key: rfs-get-selector-key($selector);

  // Store regular rule
  @if not map-has-key($rfs-rules-map, $selector-key) {
    $rfs-rules-map: map-merge($rfs-rules-map, ($selector-key: ())) !global;
  }
  $properties: map-get($rfs-rules-map, $selector-key);
  $properties: map-merge($properties, ($property: $formatted-value));
  $rfs-rules-map: map-merge($rfs-rules-map, ($selector-key: $properties)) !global;

  // Store fixed value for disable-rfs if enabled
  @if $rfs-disable-class and $fixed-value != null {
    // Skip :root selectors for disable-rfs classes
    @if str-index($selector-key, ":root") == null {
      // Store the fixed value with the same formatting
      $formatted-fixed: if($variable != null, unquote("var(#{$variable}, #{$fixed-value})"), $fixed-value);

      // Use the selector key as is for the disable map
      $selector-str: $selector-key;

      // Initialize disable map entry if needed
      @if not map-has-key($rfs-disable-class-map, $selector-str) {
        $rfs-disable-class-map: map-merge($rfs-disable-class-map, ($selector-str: ())) !global;
      }

      // Store the fixed value
      $disable-properties: map-get($rfs-disable-class-map, $selector-str);
      $disable-properties: map-merge($disable-properties, ($property: $formatted-fixed));
      $rfs-disable-class-map: map-merge($rfs-disable-class-map, ($selector-str: $disable-properties)) !global;
    }
  }

  // Return the formatted value for debugging
  @return $formatted-value;
}

